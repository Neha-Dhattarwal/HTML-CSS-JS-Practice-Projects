1Ô∏è‚É£ Quiz Data Declaration
const quizData = [
    {
        question: "What is the correct way to declare a variable in JavaScript?",
        options: ["var myVar;", "let myVar;", "const myVar;"],
        correctIndex: 2
    },
    ...
];


Explanation:

const quizData ‚Üí Creates a constant variable called quizData which cannot be reassigned.

It‚Äôs an array [] containing objects {}.

Each object represents one question.

Each object has 3 things:

question ‚Üí The question text.

options ‚Üí An array of answers the user can click.

correctIndex ‚Üí The index of the correct answer in the options array. (Index starts from 0)

2Ô∏è‚É£ Score Initialization
let score = 0;


Explanation:

let score ‚Üí Creates a variable score that can change during the game.

Initially, it‚Äôs 0 because the user hasn‚Äôt answered anything yet.

3Ô∏è‚É£ Display Quiz Function
function displayQuiz() {
    const quizContainer = document.getElementById('quiz-container');


Explanation:

function displayQuiz() ‚Üí This is a function that shows all the quiz questions on the webpage.

document.getElementById('quiz-container') ‚Üí Finds the <div> in HTML where we want to insert all the questions.

Loop through questions
for (let i = 0; i < quizData.length; i++) {
    const currentQuestion = quizData[i];


Explanation:

for ‚Üí Loops through all the questions one by one.

i ‚Üí Keeps track of which question we are on.

currentQuestion ‚Üí Stores the current question object so it‚Äôs easier to use.

Create Question Card
const questionCard = document.createElement('div');
questionCard.className = 'question-card';
questionCard.id = `question-${i}`;


Explanation:

document.createElement('div') ‚Üí Creates a new <div> for one question.

className ‚Üí Gives it a CSS style from .question-card.

id = question-${i} ‚Üí Gives each question a unique id like question-0, question-1.

Add Question Text
const questionText = document.createElement('h3');
questionText.className = 'font-semibold text-gray-800 mb-2';
questionText.textContent = `${i + 1}. ${currentQuestion.question}`;
questionCard.appendChild(questionText);


Explanation:

Creates a <h3> element for the question text.

Adds some styles using className.

textContent ‚Üí Sets the actual question from our quiz data.

appendChild ‚Üí Adds this question text inside the question card <div>.

Create Option Buttons
currentQuestion.options.forEach((option, optionIndex) => {
    const optionButton = document.createElement('button');
    optionButton.className = 'option-button';
    optionButton.textContent = option;
    optionButton.dataset.questionIndex = i;
    optionButton.dataset.optionIndex = optionIndex;


Explanation:

forEach ‚Üí Loops through all the answer options.

Creates a <button> for each option.

Adds styles using className = 'option-button'.

textContent = option ‚Üí Sets the text of the button.

dataset ‚Üí Stores extra info in the button:

questionIndex ‚Üí Which question this option belongs to.

optionIndex ‚Üí Which option number it is.

Handle Option Click
optionButton.addEventListener('click', (event) => {
    const parentCard = event.target.closest('.question-card');
    parentCard.querySelectorAll('.option-button').forEach(btn => {
        btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
});


Explanation:

addEventListener('click', ...) ‚Üí Run this code when the user clicks an option.

closest('.question-card') ‚Üí Finds the parent card (so we only affect this question).

querySelectorAll ‚Üí Finds all option buttons in this question.

btn.classList.remove('selected') ‚Üí Remove any previously selected button.

event.target.classList.add('selected') ‚Üí Highlight the button the user just clicked.

‚úÖ So this ensures only one option can be selected per question.

Add Button to Question Card
questionCard.appendChild(optionButton);


Explanation:

Adds the option button inside the question card <div>.

Add Question Card to Quiz
quizContainer.appendChild(questionCard);


Explanation:

Adds the whole question card with its options into the main quiz container on the page.

Check Answers Function
function checkAnswers() {
    score = 0;


Explanation:

function checkAnswers() ‚Üí This runs when the Submit button is clicked.

Resets score to 0 in case the user clicks submit multiple times.

Loop through questions to check
for (let i = 0; i < quizData.length; i++) {
    const currentQuestion = quizData[i];
    const questionCard = document.getElementById(`question-${i}`);
    const selectedButton = questionCard.querySelector('.option-button.selected');


Explanation:

Loops through each question.

Finds the question card and the button the user selected.

Check if answer is correct
if (selectedButton) {
    const selectedIndex = parseInt(selectedButton.dataset.optionIndex);
    const correctIndex = currentQuestion.correctIndex;

    if (selectedIndex === correctIndex) {
        score++;
        selectedButton.classList.add('correct');
    } else {
        selectedButton.classList.add('incorrect');
        const correctButton = questionCard.querySelector(`[data-option-index="${correctIndex}"]`);
        correctButton.classList.add('correct');
    }
}


Explanation:

if (selectedButton) ‚Üí Check if user clicked any option.

parseInt ‚Üí Converts string to number for comparison.

If the selected option index matches the correct index:

Add 1 to score.

Highlight the button green (correct).

Else (wrong answer):

Highlight the clicked button red (incorrect).

Highlight the correct answer green so user can see it.

Show Score
const scoreContainer = document.getElementById('score-container');
scoreContainer.textContent = `You scored ${score} out of ${quizData.length} questions!`;


Explanation:

Finds the score container <div> in HTML.

Shows the final score like ‚ÄúYou scored 3 out of 4 questions!‚Äù.

Disable Submit Button
document.getElementById('submit-btn').disabled = true;
document.getElementById('submit-btn').classList.remove('bg-blue-500', 'hover:bg-blue-600');
document.getElementById('submit-btn').classList.add('bg-gray-400', 'cursor-not-allowed');


Explanation:

Prevents the user from clicking submit again.

Changes the button color to gray and cursor to not-allowed.

Call displayQuiz on Page Load
displayQuiz();


Explanation:

Runs the displayQuiz() function as soon as the page loads.

This shows all the questions without the user having to click anything.

‚úÖ Summary in Super Simple Words:

We store questions and answers in quizData.

displayQuiz() shows all questions and options on the page.

Clicking an option highlights it.

Clicking submit checks answers, colors them green/red, calculates the score, and shows it.

Submit button is disabled after checking so user cannot cheat.

If you want, I can also draw a small diagram showing how a question and its options flow from quizData ‚Üí buttons ‚Üí score, which makes it even easier to visualize.

Do you want me to do that?

You said:
optionButton.addEventListener('click', (event) => {
    const parentCard = event.target.closest('.question-card');
    parentCard.querySelectorAll('.option-button').forEach(btn => {
        btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
});


explain this part i did not get it 
ChatGPT said:

Perfect question üëç this is the heart of the quiz ‚Üí it makes sure only one option per question can be selected at a time.

Let‚Äôs break it line by line:

The Code
optionButton.addEventListener('click', (event) => {
    const parentCard = event.target.closest('.question-card');
    parentCard.querySelectorAll('.option-button').forEach(btn => {
        btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
});

1Ô∏è‚É£ optionButton.addEventListener('click', (event) => { ... });

addEventListener('click', ...) ‚Üí Runs the code when this button is clicked.

event ‚Üí Information about the click (which button, where, etc.).

event.target ‚Üí The actual button that was clicked.

2Ô∏è‚É£ const parentCard = event.target.closest('.question-card');

event.target.closest('.question-card') ‚Üí Finds the nearest parent <div> with the class .question-card.

Why? Because we only want to handle this question‚Äôs buttons, not all buttons in the quiz.

üëâ Example:
If you click "let myVar;" on Question 1 ‚Üí

parentCard becomes the <div> that contains Question 1 and its options.
It isolates the scope to just that question.

3Ô∏è‚É£ parentCard.querySelectorAll('.option-button').forEach(btn => { btn.classList.remove('selected'); });

querySelectorAll('.option-button') ‚Üí Finds all option buttons inside this one question.

forEach(btn => { ... }) ‚Üí Loops through each of those buttons.

btn.classList.remove('selected') ‚Üí Removes the blue highlight (the selected class).

üëâ This clears any previous selection for this question.

4Ô∏è‚É£ event.target.classList.add('selected');

event.target ‚Üí The button the user just clicked.

.classList.add('selected') ‚Üí Adds the CSS class selected to it (blue background).

üëâ This means only the latest clicked option will stay highlighted.

‚úÖ Put Together

When you click an option:

It looks at the whole question card (so it doesn‚Äôt affect other questions).

Removes the "selected" highlight from all options in that question.

Adds "selected" to the option you just clicked.

üëâ Think of it like a multiple-choice exam where you can tick only one box per question.
If you tick a new box, the old tick is removed.

Would you like me to make a mini step-by-step example with Question 1 showing what happens before and after a click (with visuals like ‚úîÔ∏è/‚ùå)?

You said:
mujhe nhi smjh aaa rha , explain in easiest language 
ChatGPT said:

Thik hai üòä mai isko bahut simple language me, step by step samjhati hoon.

Yeh code hai:

optionButton.addEventListener('click', (event) => {
    const parentCard = event.target.closest('.question-card');
    parentCard.querySelectorAll('.option-button').forEach(btn => {
        btn.classList.remove('selected');
    });
    event.target.classList.add('selected');
});

Imagine Scene üé≠

Tumhare paas ek question card hai:

Q1: What is JS variable declaration?

var myVar;

let myVar;

const myVar;

Tum inme se ek button pe click karogi. Ab dekho kya hota hai ‚¨áÔ∏è

Step by Step:
1. optionButton.addEventListener('click', ...)

üëâ Matlab: jab bhi tum kisi option button pe click karogi, ye code chalega.

2. const parentCard = event.target.closest('.question-card');

üëâ Matlab:

event.target = jis button ko click kiya.

closest('.question-card') = us button ka parent box (sirf usi question ka container).

‚ö° Isse ensure hota hai ki sirf usi question ke buttons par effect ho, dusre questions par nahi.

3. parentCard.querySelectorAll('.option-button').forEach(btn => { btn.classList.remove('selected'); });

üëâ Matlab:

Us question ke andar jitne bhi option buttons hain, sab se blue highlight (selected) hata do.

‚ö° Example: Agar tumne pehle var myVar; pe click kiya tha, to uska blue highlight hat jaayega.

4. event.target.classList.add('selected');

üëâ Matlab:

Jis button pe tumne abhi click kiya hai, usko blue highlight (selected) de do.

‚ö° Example: Ab tumne const myVar; pe click kiya, to ye blue ho jaayega.

‚úÖ Easy Example

Tumne pehle var myVar; pe click kiya ‚Üí ye blue ho gaya.

Ab tum const myVar; pe click karti ho ‚Üí code purane se blue hatata hai, aur naye wale ko blue kar deta hai.

Matlab ek time par sirf ek option select ho sakta hai per question.

üëâ So, simple words me:
Ye code ensure karta hai ki ek question ke liye tum ek hi option choose kar sako. Agar tum dusra option select karogi to pehle wala hat jaayega, aur naya wala blue ho jaayega.